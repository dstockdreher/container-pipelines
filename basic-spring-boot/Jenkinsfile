library identifier: "pipeline-library@master",
retriever: modernSCM(
  [
    $class: "GitSCMSource",
    remote: "https://github.com/sqtran/pipeline-library.git"
  ]
)

openshift.withCluster() {
  env.NAMESPACE = openshift.project()
  env.POM_FILE = env.BUILD_CONTEXT_DIR ? "${env.BUILD_CONTEXT_DIR}/pom.xml" : "pom.xml"
  //env.APP_NAME = "${JOB_NAME}".replaceAll(/-build.*/, '')
  env.APP_NAME = "basic-spring-boot"
  echo "Starting Pipeline for ${APP_NAME}..."
  env.BUILD = "${env.NAMESPACE}"
  env.DEV = "${APP_NAME}-dev"
  env.STAGE = "${APP_NAME}-stage"
  env.PROD = "${APP_NAME}-prod"
}

pipeline {
  // Use Jenkins Maven slave
  // Jenkins will dynamically provision this as OpenShift Pod
  // All the stages and steps of this Pipeline will be executed on this Pod
  // After Pipeline completes the Pod is killed so every run will have clean
  // workspace
  agent {
    label 'maven'
  }

  // Pipeline Stages start here
  // Requeres at least one stage
  stages {

    // Checkout source code
    // This is required as Pipeline code is originally checkedout to
    // Jenkins Master but this will also pull this same code to this slave
    stage('Git Checkout') {
      steps {
        // Turn off Git's SSL cert check, uncomment if needed
        sh 'git config --global http.sslVerify false'
        git url: "${APPLICATION_SOURCE_REPO}",
            credentialsId: 'gitlab-temp'
      }
    }

    // Run Maven build, skipping tests
    stage('Build'){
      steps {
        configFileProvider([configFile(fileId: '8881f21d-1bad-4dcb-9650-23b18c68b26b', variable: 'MAVEN_SETTINGS')]) {
          sh 'mvn -s $MAVEN_SETTINGS clean install -DskipTests=true -f ${POM_FILE}'    
          //sh 'mvn clean install -X -DskipTests=true -f ${POM_FILE}'    
        }
      }
    }

    // Run Maven unit tests
   // stage('Unit Test'){
    //  steps {
    //    configFileProvider([configFile(fileId: '8881f21d-1bad-4dcb-9650-23b18c68b26b', variable: 'MAVEN_SETTINGS')]) {
    //      sh 'mvn -s $MAVEN_SETTINGS test -f ${POM_FILE}'    
          //sh 'mvn clean install -X -DskipTests=true -f ${POM_FILE}'    
    //    }
        //sh "mvn test -f ${POM_FILE}"
    //  }
    //}

    // Build Container Image using the artifacts produced in previous stages
    stage('Build Container Image'){
      steps {
        // Copy the resulting artifacts into common directory
        sh """
          ls target/*
          rm -rf oc-build && mkdir -p oc-build/deployments
          for t in \$(echo "jar;war;ear" | tr ";" "\\n"); do
            cp -rfv ./target/*.\$t oc-build/deployments/ 2> /dev/null || echo "No \$t files"
          done
        """

        // Build container image using local Openshift cluster
        // Giving all the artifacts to OpenShift Binary Build
        // This places your artifacts into right location inside your S2I image
        // if the S2I image supports it.
          echo "WHAT IS HAPPENING? " 
          echo "APP_NAME is ${APP_NAME}..."
          echo "BUILD is ${BUILD}..."
          echo "NAMESPACE IS ${NAMESPACE}"
          echo "bol-incoming-data-processor is the buildconfig being used" 

          // We're not even testing that the build works, we're just trying to get it to tag from -build into -dev, so i'll comment it out for now
          //binaryBuild(projectName: env.BUILD, buildConfigName: "bol-incoming-data-processor", artifactsDirectoryName: "oc-build")
      }
    }

    stage('Promote from Build to Dev') {
      steps {
        echo "promote BUILD is ${BUILD}"
        echo "NAMESPACE IS ${NAMESPACE}"
        echo "to image path is  ${DEV}" 
 
        tagImage(sourceImageName: env.APP_NAME, sourceImagePath: env.BUILD, toImagePath: env.DEV, toImageName: env.APP_NAME)
        tagImage(sourceImageName: env.APP_NAME, sourceImagePath: env.BUILD, toImagePath: env.BUILD, toImageName: env.APP_NAME, toImageTag: "steve")
        echo "tagImage Done should be done now..."
      }
    }

    stage ('Verify Deployment to Dev') {
      steps {
        echo "start verifyDeployment"
        verifyDeployment(projectName: env.DEV, targetApp: env.APP_NAME)
        echo "verifyDeployment Done"
      }
    }

    stage('Promote from Dev to Stage') {
      steps {
        tagImage(sourceImageName: env.APP_NAME, sourceImagePath: env.DEV, toImagePath: env.STAGE)
      }
    }

    stage ('Verify Deployment to Stage') {
      steps {
        verifyDeployment(projectName: env.STAGE, targetApp: env.APP_NAME)
      }
    }

    stage('Promotion gate') {
      steps {
        script {
          input message: 'Promote application to Production?'
        }
      }
    }

    stage('Promote from Stage to Prod') {
      steps {
        tagImage(sourceImageName: env.APP_NAME, sourceImagePath: env.STAGE, toImagePath: env.PROD)
      }
    }

    stage ('Verify Deployment to Prod') {
      steps {
        verifyDeployment(projectName: env.PROD, targetApp: env.APP_NAME)
      }
    }
  }
}
